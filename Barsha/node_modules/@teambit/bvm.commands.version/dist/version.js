"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.showAllVersions = exports.command = exports.VersionCmd = void 0;
const chalk_1 = __importDefault(require("chalk"));
const util_1 = __importDefault(require("util"));
const bvm_config_1 = require("@teambit/bvm.config");
const bvm_list_1 = require("@teambit/bvm.list");
const child_process_1 = require("child_process");
const semver_1 = __importDefault(require("semver"));
const execP = util_1.default.promisify(child_process_1.exec);
const BVM_PACKAGE_NAME = "@teambit/bvm";
const defaultShowVersionOptions = {
    includeRemote: true
};
class VersionCmd {
    constructor() {
        this.aliases = ["version"];
        this.describe = "show used (current) version, latest installed version and latest remote version (bit and bvm)";
        this.command = ["version"];
    }
    builder(yargs) {
        yargs
            .option({
            "include-remote": {
                describe: "show latest remote version",
                default: true,
                type: "boolean",
            },
        })
            .example("$0 version", "show used (current) version, latest installed version and latest remote version")
            .example("$0 version --include-remote false", "show used (current) version and latest installed version (without latest remote version)");
        return yargs;
    }
    handler(args) {
        return __awaiter(this, void 0, void 0, function* () {
            const output = yield showAllVersions(args);
            return console.log(output);
        });
    }
}
exports.VersionCmd = VersionCmd;
exports.command = new VersionCmd();
function showAllVersions(options = defaultShowVersionOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        const actualOpts = Object.assign({}, defaultShowVersionOptions, options);
        const config = bvm_config_1.Config.load();
        const currentBvmVersion = actualOpts.overrideLocalVersion ? actualOpts.overrideLocalVersion : yield getBvmLocalVersion();
        const latestBvmRemoteVersion = actualOpts.includeRemote
            ? yield getBvmRemoteVersion()
            : undefined;
        const currentVersion = config.getDefaultLinkVersion();
        const latestInstalledVersion = (yield bvm_list_1.listLocal()).latest().version;
        const latestRemoteVersion = actualOpts.includeRemote
            ? (yield bvm_list_1.listRemote()).latest().version
            : undefined;
        const output = formatOutput({
            currentBvmVersion,
            latestBvmRemoteVersion,
            currentVersion,
            latestInstalledVersion,
            latestRemoteVersion,
        });
        return output;
    });
}
exports.showAllVersions = showAllVersions;
function formatOutput(versions) {
    const currentBvmVersionOutput = versions.currentBvmVersion
        ? `current (used) bvm version: ${chalk_1.default.green(versions.currentBvmVersion)}`
        : `current (used) bvm version: ${chalk_1.default.red('unknown')}`;
    const latestRemoteBvmOutput = versions.latestBvmRemoteVersion
        ? `latest available bvm version: ${chalk_1.default.green(versions.latestBvmRemoteVersion)}`
        : undefined;
    const currentVersionOutput = versions.currentVersion
        ? `current (used) bit version: ${chalk_1.default.green(versions.currentVersion)}`
        : undefined;
    const latestInstalled = versions.latestInstalledVersion
        ? `latest installed bit version: ${chalk_1.default.green(versions.latestInstalledVersion)}`
        : undefined;
    const latestRemote = versions.latestRemoteVersion
        ? `latest available bit version: ${chalk_1.default.green(versions.latestRemoteVersion)}`
        : undefined;
    const newerBvmOutput = getNewerBvmAvailableOutput(versions.currentBvmVersion, versions.latestBvmRemoteVersion);
    const newerBitOutput = getNewerBitAvailableOutput(versions.currentVersion, versions.latestInstalledVersion, versions.latestRemoteVersion);
    const outputs = [
        currentBvmVersionOutput,
        latestRemoteBvmOutput,
        currentVersionOutput,
        latestInstalled,
        latestRemote,
        "\n",
        newerBvmOutput,
        newerBitOutput,
    ].filter((output) => output);
    return outputs.join("\n");
}
function getNewerBvmAvailableOutput(currentBvmVersion, latestBvmRemoteVersion) {
    if (!currentBvmVersion || !latestBvmRemoteVersion) {
        return undefined;
    }
    if (semver_1.default.gt(latestBvmRemoteVersion, currentBvmVersion)) {
        const npmCommand = chalk_1.default.cyan(`npm install -g ${BVM_PACKAGE_NAME}`);
        const yarnCommand = chalk_1.default.cyan(`yarn global add ${BVM_PACKAGE_NAME}`);
        return `new version of ${chalk_1.default.cyan("bvm")} is available, upgrade your ${chalk_1.default.cyan("bvm")} by running "${npmCommand}" or "${yarnCommand}"`;
    }
}
function getNewerBitAvailableOutput(currentVersion, latestInstalledVersion, latestRemoteVersion) {
    if (!currentVersion) {
        return undefined;
    }
    if (!latestInstalledVersion && !latestRemoteVersion) {
        return undefined;
    }
    if (semver_1.default.gt(latestInstalledVersion, currentVersion) ||
        (latestRemoteVersion && semver_1.default.gt(latestRemoteVersion, currentVersion))) {
        return `new version of ${chalk_1.default.cyan("bit")} is available, upgrade your ${chalk_1.default.cyan("bit")} by running "${chalk_1.default.cyan("bvm upgrade")}"`;
    }
}
function getBvmLocalVersion() {
    return __awaiter(this, void 0, void 0, function* () {
        const { stdout } = yield execP("bvm local-version");
        const stdoutString = stdout.toString().trim();
        const result = semver_1.default.valid(stdoutString) ? stdoutString : undefined;
        return result;
    });
}
function getBvmRemoteVersion() {
    return __awaiter(this, void 0, void 0, function* () {
        const { stdout } = yield execP("npm view @teambit/bvm version");
        return stdout.toString();
    });
}
//# sourceMappingURL=version.js.map