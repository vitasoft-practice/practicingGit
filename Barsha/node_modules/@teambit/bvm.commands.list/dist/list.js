"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.command = exports.ListCmd = void 0;
const bvm_list_1 = require("@teambit/bvm.list");
class ListCmd {
    constructor() {
        this.aliases = ['l', 'list'];
        this.describe = 'list installed bit versions';
        this.command = [
            'list'
        ];
    }
    builder(yargs) {
        yargs
            .option({
            remote: {
                alias: ['r'],
                describe: 'show versions exist in the remote server',
                default: false,
                type: 'boolean'
            }
        })
            .example('$0 list', 'show all installed versions')
            .example('$0 list --remote', 'show all versions available for install');
        return yargs;
    }
    handler(args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (args.remote) {
                const list = yield bvm_list_1.listRemote();
                console.log(list);
                return;
            }
            const list = yield bvm_list_1.listLocal();
            console.log(localListOutput(list.toVersionsStringArray()));
            return;
        });
    }
    ;
}
exports.ListCmd = ListCmd;
exports.command = new ListCmd();
function localListOutput(versions) {
    if (!versions || !versions.length) {
        return 'there are no installed version, use bvm install to install new versions';
    }
    return versions.join('\n');
}
//# sourceMappingURL=list.js.map