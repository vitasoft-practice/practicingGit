#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const yargs_1 = __importDefault(require("yargs/yargs"));
const chalk_1 = __importDefault(require("chalk"));
const helpers_1 = require("yargs/helpers");
const bvm_commands_install_1 = require("@teambit/bvm.commands.install");
const bvm_commands_remove_1 = require("@teambit/bvm.commands.remove");
const bvm_commands_list_1 = require("@teambit/bvm.commands.list");
const bvm_commands_upgrade_1 = require("@teambit/bvm.commands.upgrade");
const bvm_commands_config_1 = require("@teambit/bvm.commands.config");
const bvm_commands_link_1 = require("@teambit/bvm.commands.link");
const bvm_commands_version_1 = require("@teambit/bvm.commands.version");
const local_version_1 = require("./local-version");
let argv;
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        argv = yield yargs_1.default(helpers_1.hideBin(process.argv))
            .scriptName("bvm")
            .usage("Usage: $0 <cmd> [options]") // usage string of application.
            .version()
            .option("h", {
            alias: "help",
            description: "display help message",
        })
            .option("verbose", {
            description: "show verbose output",
        })
            .alias("v", "version")
            // TODO: this is a new feature merged recently- https://github.com/yargs/yargs/commit/1a1e2d554dca3566bc174584394419be0120d207
            // TODO: once it's officially released, uncomment, and test it with bvm -v | --version (should be part of v17.0.0 of yargs)
            // TODO: add back once it supports async function see here - https://github.com/yargs/yargs/issues/1955
            // .showVersion(showVersion)
            .command(bvm_commands_version_1.versionCmd)
            .command(local_version_1.localVersionCmd)
            .command(bvm_commands_upgrade_1.upgradeCmd)
            .command(bvm_commands_install_1.installCmd)
            .command(bvm_commands_list_1.listCmd)
            .command(bvm_commands_link_1.linkCmd)
            .command(bvm_commands_remove_1.removeCmd)
            .command(bvm_commands_config_1.configCmd)
            .example("$0 version", "show used (current) version, latest installed version and latest remote version (bit and bvm)")
            .example("$0 upgrade", "install the latest version of bit")
            .example("$0 install 0.0.200", "install version 0.0.200 of bit")
            .example("$0 list", "show all installed versions")
            .example("$0 remove all --keep-latest-versions 3", "remove all installed versions except the last 3 installed versions")
            .completion()
            // Show help when there is no args
            .demandCommand(1, "")
            .wrap(yargs_1.default().terminalWidth())
            .epilog("for more information visit https://harmony-docs.bit.dev/docs/getting-started/install-bit")
            .fail(handleError).argv;
        function handleError(msg, err, yargs) {
            const verbose = process.argv.includes('--verbose');
            if (!msg && !err) {
                return yargs.showHelp();
            }
            console.log(chalk_1.default.red((err === null || err === void 0 ? void 0 : err.message) || msg));
            if (!(err === null || err === void 0 ? void 0 : err.bvm) || verbose) {
                console.log(err === null || err === void 0 ? void 0 : err.stack);
            }
        }
        function showVersion(currentVersion) {
            return __awaiter(this, void 0, void 0, function* () {
                const allVersions = yield bvm_commands_version_1.showAllVersions({ overrideLocalVersion: currentVersion, includeRemote: true });
                console.log(allVersions);
            });
        }
    });
}
main().then().catch((e) => { });
//# sourceMappingURL=app.js.map