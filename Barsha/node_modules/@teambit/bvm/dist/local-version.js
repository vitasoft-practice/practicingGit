"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.localVersionCmd = exports.LocalVersionCmd = void 0;
const path_1 = __importDefault(require("path"));
// This command is here in the app component in purpose. it's because it go to it's package.json file.
// We want to make sure it gets to the correct package.json. please do not move to its own component
// It has it own command since we want to change the builtin -v | --version option to show the version command output
class LocalVersionCmd {
    constructor() {
        this.aliases = ["local-version"];
        this.desc = false;
        this.command = ["local-version"];
    }
    handler() {
        return __awaiter(this, void 0, void 0, function* () {
            const pjson = require(path_1.default.join(__dirname, "../package.json"));
            return console.log(pjson === null || pjson === void 0 ? void 0 : pjson.version);
        });
    }
}
exports.LocalVersionCmd = LocalVersionCmd;
exports.localVersionCmd = new LocalVersionCmd();
//# sourceMappingURL=local-version.js.map