"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.installVersion = void 0;
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const bvm_fetch_1 = require("@teambit/bvm.fetch");
const toolbox_fs_progress_bar_file_extractor_1 = require("@teambit/toolbox.fs.progress-bar-file-extractor");
const ora_1 = __importDefault(require("ora"));
const time_time_format_1 = require("@teambit/time.time-format");
const bvm_config_1 = require("@teambit/bvm.config");
const bvm_link_1 = require("@teambit/bvm.link");
const bvm_list_1 = require("@teambit/bvm.list");
const defaultOpts = {
    override: false,
    replace: false
};
const loader = ora_1.default();
function installVersion(version, opts = defaultOpts) {
    return __awaiter(this, void 0, void 0, function* () {
        const concreteOpts = Object.assign({}, defaultOpts, opts);
        const config = getConfig();
        const remoteVersionList = yield bvm_list_1.listRemote();
        let resolvedVersion = version;
        if (!version || version === 'latest') {
            resolvedVersion = remoteVersionList.latest().version;
        }
        const { versionDir, exists } = config.getSpecificVersionDir(resolvedVersion);
        if (exists) {
            if (!concreteOpts.override) {
                const replacedCurrentResult = yield replaceCurrentIfNeeded(concreteOpts.replace, resolvedVersion);
                return {
                    downloadRequired: false,
                    installedVersion: resolvedVersion,
                    replacedCurrent: replacedCurrentResult.replaced,
                    previousCurrentVersion: replacedCurrentResult.previousCurrentVersion,
                    versionPath: versionDir
                };
            }
            yield removeWithLoader(versionDir);
        }
        const tempDir = config.getTempDir();
        const fetchDestination = path_1.default.join(tempDir, resolvedVersion);
        const fetchOpts = {
            overrideDir: true,
            destination: fetchDestination
        };
        const downloadResults = yield bvm_fetch_1.fetch(resolvedVersion, fetchOpts);
        // TODO: check if version already exists, return it's location
        if (downloadResults.downloadedFile) {
            const tarFile = downloadResults.downloadedFile;
            yield extractWithLoader(downloadResults.downloadedFile, downloadResults.resolvedVersion);
            yield removeWithLoader(tarFile);
        }
        yield moveWithLoader(tempDir, versionDir, { overwrite: true });
        const replacedCurrentResult = yield replaceCurrentIfNeeded(concreteOpts.replace, downloadResults.resolvedVersion);
        loader.stop();
        return {
            downloadRequired: !!downloadResults.downloadedFile,
            installedVersion: downloadResults.resolvedVersion,
            replacedCurrent: replacedCurrentResult.replaced,
            previousCurrentVersion: replacedCurrentResult.previousCurrentVersion,
            versionPath: versionDir
        };
    });
}
exports.installVersion = installVersion;
function extractWithLoader(filePath, version) {
    return __awaiter(this, void 0, void 0, function* () {
        const extractLoaderText = `extracting version ${version}`;
        const extractStartTime = Date.now();
        const progressBarOpts = {
            format: `extracting version ${version} [{bar}] {percentage}% | ETA: {etah} | Speed: {speed}`,
        };
        yield toolbox_fs_progress_bar_file_extractor_1.extract(filePath, undefined, {}, progressBarOpts);
        const extractEndTime = Date.now();
        const extractTimeDiff = time_time_format_1.timeFormat(extractEndTime - extractStartTime);
        loader.succeed(`${extractLoaderText} in ${extractTimeDiff}`);
    });
}
function removeWithLoader(filePath) {
    return __awaiter(this, void 0, void 0, function* () {
        const removeLoaderText = `removing ${filePath}`;
        loader.start(removeLoaderText);
        const removeStartTime = Date.now();
        yield fs_extra_1.default.remove(filePath);
        const removeEndTime = Date.now();
        const removeTimeDiff = time_time_format_1.timeFormat(removeEndTime - removeStartTime);
        loader.succeed(`${removeLoaderText} in ${removeTimeDiff}`);
    });
}
function moveWithLoader(src, target, opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const moveLoaderText = `moving from temp folder to final location`;
        loader.start(moveLoaderText);
        const moveStartTime = Date.now();
        yield fs_extra_1.default.move(src, target, opts);
        const moveEndTime = Date.now();
        const moveTimeDiff = time_time_format_1.timeFormat(moveEndTime - moveStartTime);
        loader.succeed(`${moveLoaderText} in ${moveTimeDiff}`);
    });
}
function replaceCurrentIfNeeded(forceReplace, version) {
    return __awaiter(this, void 0, void 0, function* () {
        const config = getConfig();
        const currentLink = config.getDefaultLinkVersion();
        if (forceReplace || !currentLink) {
            const { previousLinkVersion } = yield bvm_link_1.linkOne(config.getDefaultLinkName(), version, true);
            return {
                replaced: true,
                previousCurrentVersion: previousLinkVersion
            };
        }
        return {
            replaced: false
        };
    });
}
function getConfig() {
    const config = bvm_config_1.Config.load();
    return config;
}
//# sourceMappingURL=install.js.map