"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.command = exports.ConfigCmd = void 0;
const bvm_config_1 = require("@teambit/bvm.config");
const bvm_error_1 = require("@teambit/bvm.error");
const config = bvm_config_1.Config.load();
class ConfigCmd {
    constructor() {
        this.aliases = ['c', 'config'];
        this.describe = 'configure bvm';
        this.command = [
            'config [sub-command] [key] [value]'
        ];
    }
    builder(yargs) {
        yargs.positional('sub-command', {
            choices: ['set', 'get', 'del'],
            type: 'string',
            describe: 'sub command'
        })
            .positional('key', {
            type: 'string',
            describe: 'key to get/set/delete'
        })
            .option({
            persisted: {
                describe: 'show all keys stored in the config file (no defaults)',
                type: 'boolean',
                conflicts: ['sub-command', 'key', 'value']
            }
        })
            .option({
            path: {
                describe: 'show config file path location',
                type: 'boolean',
                conflicts: ['persisted', 'sub-command', 'key', 'value']
            }
        })
            .example('$0 config', 'list all configured keys')
            .example('$0 config --persisted', 'show all keys stored in the config file (no defaults)')
            .example('$0 config --path', 'show config file path location')
            .example('$0 config get BVM_DIR', 'show the root bvm dir')
            .example('$0 config set BVM_DIR some-path', 'set the root bvm dir to be some-path')
            .example('$0 config del BVM_DIR', 'delete the root bvm dir from config (will fallback to default location)');
        return yargs;
    }
    handler(args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (args.subCommand) {
                return handleSubCommand(args);
            }
            if (args.path) {
                console.log(config.path());
                return;
            }
            const list = config.list(args.persisted);
            console.log(list);
        });
    }
    ;
}
exports.ConfigCmd = ConfigCmd;
function handleSubCommand(args) {
    switch (args.subCommand) {
        case 'get': {
            if (!args.key)
                throw new bvm_error_1.BvmError('must provide a key');
            const val = config.get(args.key);
            console.log(val);
            return;
        }
        case 'set': {
            if (!args.key)
                throw new bvm_error_1.BvmError('must provide a key');
            if (!args.value)
                throw new bvm_error_1.BvmError('must provide a value');
            config.set(args.key, args.value);
            console.log('set successfully');
            return;
        }
        case 'del': {
            if (!args.key)
                throw new bvm_error_1.BvmError('must provide a key');
            const val = config.del(args.key);
            console.log('deleted successfully');
            return;
        }
        default:
            throw new bvm_error_1.BvmError(`sub command ${args.subCommand} is invalid`);
    }
}
exports.command = new ConfigCmd();
//# sourceMappingURL=config.js.map