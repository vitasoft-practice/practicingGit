"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.command = exports.InstallCmd = void 0;
const bvm_install_1 = require("@teambit/bvm.install");
const time_time_format_1 = require("@teambit/time.time-format");
const chalk_1 = __importDefault(require("chalk"));
class InstallCmd {
    constructor() {
        this.aliases = ['i', 'install'];
        this.describe = 'install specific bit version';
        this.command = [
            'install [bit-version]'
        ];
    }
    builder(yargs) {
        yargs.positional('bit-version', {
            describe: 'version to install',
            default: 'latest',
            type: 'string'
        })
            .option({
            override: {
                describe: 'download the version again even if it is already exist in file system',
                default: false,
                type: 'boolean'
            }
        })
            .option({
            replace: {
                describe: 'replace current version',
                default: true,
                type: 'boolean'
            }
        })
            .example('$0 install 0.0.200', 'install version 0.0.200 of bit');
        return yargs;
    }
    handler(args) {
        return __awaiter(this, void 0, void 0, function* () {
            const opts = {
                override: args.override,
                replace: args.replace
            };
            const installStartTime = Date.now();
            const { versionPath, installedVersion } = yield bvm_install_1.installVersion(args.bitVersion, opts);
            const installEndTime = Date.now();
            const installTimeDiff = time_time_format_1.timeFormat(installEndTime - installStartTime);
            console.log(`version ${chalk_1.default.green(installedVersion)} installed on ${chalk_1.default.green(versionPath)} in ${chalk_1.default.cyan(installTimeDiff)}`);
            return;
        });
    }
    ;
}
exports.InstallCmd = InstallCmd;
exports.command = new InstallCmd();
//# sourceMappingURL=install.js.map