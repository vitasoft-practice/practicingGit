"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.latestFromArray = exports.listLocal = exports.listRemote = void 0;
const os_1 = __importDefault(require("os"));
const gcp_1 = require("./gcp");
const bvm_config_1 = require("@teambit/bvm.config");
const semver_1 = __importDefault(require("semver"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const version_list_1 = require("./version-list");
const version_1 = require("./version");
const config = bvm_config_1.Config.load();
function listRemote() {
    return __awaiter(this, void 0, void 0, function* () {
        const proxyConfig = config.proxyConfig();
        const gcpList = gcp_1.GcpList.create('dev', os_1.default.type(), proxyConfig);
        return gcpList.list();
    });
}
exports.listRemote = listRemote;
function listLocal() {
    return __awaiter(this, void 0, void 0, function* () {
        const versionsDir = config.getBitVersionsDir();
        const exists = yield fs_extra_1.default.pathExists(versionsDir);
        if (!exists)
            return new version_list_1.LocalVersionList([]);
        const dirEntries = yield fs_extra_1.default.readdir(versionsDir, { withFileTypes: true });
        const versions = dirEntries
            .filter((dirent) => {
            return (dirent.isDirectory() || dirent.isSymbolicLink()) && semver_1.default.valid(dirent.name);
        })
            .map((dirent) => {
            const version = dirent.name;
            const { versionDir } = config.getSpecificVersionDir(version);
            const localVersion = new version_1.LocalVersion(version, versionDir);
            return localVersion;
        });
        return new version_list_1.LocalVersionList(versions);
    });
}
exports.listLocal = listLocal;
function latestFromArray(versions) {
    const latest = semver_1.default.maxSatisfying(versions, '*');
    return latest;
}
exports.latestFromArray = latestFromArray;
//# sourceMappingURL=list.js.map