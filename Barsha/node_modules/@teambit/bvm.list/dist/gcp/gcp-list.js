"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GcpList = void 0;
const gcp_storage_1 = require("@teambit/gcp.storage");
const gcp_version_1 = require("./gcp-version");
const version_list_1 = require("../version-list");
const bucketName = 'bvm.bit.dev';
const prefix = 'versions';
class GcpList {
    constructor(gcpStorage, osType = 'Darwin', releaseType = 'dev') {
        this.gcpStorage = gcpStorage;
        this.osType = osType;
        this.releaseType = releaseType;
    }
    list() {
        return __awaiter(this, void 0, void 0, function* () {
            const files = yield this.rawFiles();
            const remoteVersions = files.map((file) => {
                const gcpVersion = new gcp_version_1.GcpVersion(file.name, file.bucket, file.md5Hash);
                return gcpVersion.toRemoteVersion();
            });
            return new version_list_1.RemoteVersionList(remoteVersions);
        });
    }
    rawFiles() {
        return __awaiter(this, void 0, void 0, function* () {
            const filesPrefix = `${prefix}/${this.releaseType}/${this.osType}/`;
            return this.gcpStorage.getFiles({ prefix: filesPrefix });
        });
    }
    static create(releaseType = 'dev', osType = 'Darwin', proxyConfig) {
        const gcpStorage = gcp_storage_1.GcpStorage.create(bucketName, proxyConfig);
        return new GcpList(gcpStorage, osType, releaseType);
    }
}
exports.GcpList = GcpList;
//# sourceMappingURL=gcp-list.js.map