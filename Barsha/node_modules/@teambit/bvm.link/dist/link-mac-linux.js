"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.link = void 0;
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const bvm_error_1 = require("@teambit/bvm.error");
const BIN_DIR = '/usr/local/bin';
function link(source, linkName) {
    return __awaiter(this, void 0, void 0, function* () {
        validateBinDirInPath(BIN_DIR);
        const dest = path_1.default.join(BIN_DIR, linkName);
        // TODO: change to fs.lstatSync(dest, {throwIfNoEntry: false});
        // TODO: this requires to upgrade fs-extra to have the throwIfNoEntry property
        // TODO: we don't use fs.pathExistsSync since it will return false in case the dest is a symlink which will result error on write
        let exists;
        try {
            exists = yield fs_extra_1.default.lstat(dest);
            // eslint-disable-next-line no-empty
        }
        catch (e) { }
        if (exists) {
            fs_extra_1.default.removeSync(dest);
        }
        const dir = path_1.default.dirname(dest);
        yield fs_extra_1.default.ensureDir(dir);
        return fs_extra_1.default.symlink(source, dest);
    });
}
exports.link = link;
function validateBinDirInPath(binDir) {
    const osPaths = (process.env.PATH || process.env.Path || process.env.path).split(path_1.default.delimiter);
    if (osPaths.indexOf(binDir) === -1) {
        throw new bvm_error_1.BvmError(`the directory ${binDir} is not a bin directory (not in the path) on the machine`);
    }
}
//# sourceMappingURL=link-mac-linux.js.map