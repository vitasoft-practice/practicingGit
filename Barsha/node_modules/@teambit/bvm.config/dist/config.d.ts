export declare const IS_WINDOWS: boolean;
export declare const CONFIG_DIR = "config";
export declare const CONFIG_FILENAME = "config.json";
export declare const ALIASES_KEY = "aliases";
export declare const LINKS_KEY = "links";
export declare const BIT_VERSIONS_FOLDER_NAME = "versions";
export declare const CFG_PROXY = "proxy";
export declare const CFG_HTTPS_PROXY = "https_proxy";
export declare const CFG_PROXY_CA = "proxy.ca";
export declare const CFG_PROXY_STRICT_SSL = "proxy.strict_ssl";
export declare const CFG_PROXY_CERT = "proxy.cert";
export declare const CFG_PROXY_KEY = "proxy.key";
export declare const CFG_PROXY_NO_PROXY = "proxy.no_proxy";
export declare const KNOWN_KEYS: string[];
export declare class Config {
    private name;
    private filePath;
    private store;
    private fsStore;
    constructor(name: string, filePath: string, defaults?: any);
    static load(newInstance?: boolean): Config;
    get(key: string): any;
    set(key: string, value: any): void;
    persist(): void;
    del(key: string): void;
    list(persistedOnly?: boolean): any;
    path(): string;
    getBvmDirectory(): string;
    getTempDir(): string;
    getDefaultLinkName(): string;
    getBitVersionsDir(): string;
    getSpecificVersionDir(version: string, innerDir?: boolean): {
        versionDir: string;
        exists: boolean;
    };
    getAliases(): Record<string, string>;
    getLinks(): Record<string, string>;
    setLink(linkName: string, value: string): string;
    getDefaultLinkVersion(): string | undefined;
    proxyConfig(): {
        ca?: undefined;
        cert?: undefined;
        httpProxy?: undefined;
        httpsProxy?: undefined;
        key?: undefined;
        noProxy?: undefined;
        strictSSL?: undefined;
    } | {
        ca: any;
        cert: any;
        httpProxy: any;
        httpsProxy: any;
        key: any;
        noProxy: any;
        strictSSL: any;
    };
}
