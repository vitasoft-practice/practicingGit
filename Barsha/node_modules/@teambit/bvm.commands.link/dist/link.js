"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.command = exports.LinkCmd = void 0;
const chalk_1 = __importDefault(require("chalk"));
const bvm_link_1 = require("@teambit/bvm.link");
class LinkCmd {
    constructor() {
        this.aliases = ['link'];
        this.describe = 'link binaries from path';
        this.command = [
            'link [name] [bit-version]'
        ];
    }
    builder(yargs) {
        yargs.positional('name', {
            describe: 'name of the link',
            type: 'string'
        })
            .positional('bit-version', {
            describe: 'version to link',
            type: 'string',
            implies: ['name']
        })
            .example('$0 link', 'link all names to versions')
            .example('$0 link bit175 1.7.5', 'link bit175 to version 1.7.5 of bit');
        return yargs;
    }
    handler(args) {
        return __awaiter(this, void 0, void 0, function* () {
            let results;
            if (!args.name) {
                results = yield bvm_link_1.linkAll();
            }
            else {
                results = [yield bvm_link_1.linkOne(args.name, args.bitVersion, true)];
            }
            printOutput(results, args.verbose);
            return;
        });
    }
    ;
}
exports.LinkCmd = LinkCmd;
function formatOutput(linkResults, verbose = false) {
    const links = linkResults.map(result => {
        const linkTarget = verbose ? chalk_1.default.cyan(`(${result.generatedLink.target})`) : '';
        const linkSource = verbose ? chalk_1.default.cyan(`(${result.generatedLink.source})`) : '';
        return (`name ${chalk_1.default.green(result.linkName)}${linkTarget} points to version ${chalk_1.default.green(result.version)}${linkSource}`);
    });
    const summery = `successfully linked binaries`;
    return [links, summery].filter(msg => msg).join('\n');
}
function printOutput(linkResults, verbose = false) {
    const output = formatOutput(linkResults, verbose);
    console.log(output);
    return output;
}
exports.command = new LinkCmd();
//# sourceMappingURL=link.js.map