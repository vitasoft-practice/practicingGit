"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GcpStorage = void 0;
const node_fetch_1 = __importDefault(require("node-fetch"));
const network_agent_1 = require("@teambit/network.agent");
class GcpStorage {
    constructor(bucketName, proxyConfig, storageAPI = 'https://storage.googleapis.com') {
        this.bucketName = bucketName;
        this.proxyConfig = proxyConfig;
        this.storageAPI = storageAPI;
    }
    getFiles(opts) {
        return __awaiter(this, void 0, void 0, function* () {
            const agent = network_agent_1.getAgent(this.storageAPI, this.proxyConfig);
            const res = yield node_fetch_1.default(`${this.storageAPI}/storage/v1/b/${this.bucketName}/o?prefix=${opts.prefix}`, {
                agent,
            });
            const json = yield res.json();
            return json.items;
        });
    }
    static create(bucketName, proxyConfig) {
        return new GcpStorage(bucketName, proxyConfig);
    }
}
exports.GcpStorage = GcpStorage;
//# sourceMappingURL=storage.js.map