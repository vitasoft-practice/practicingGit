"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.command = exports.RemoveCmd = void 0;
const bvm_remove_1 = require("@teambit/bvm.remove");
const bvm_error_1 = require("@teambit/bvm.error");
const chalk_1 = __importDefault(require("chalk"));
const ora_1 = __importDefault(require("ora"));
const loader = ora_1.default();
class RemoveCmd {
    constructor() {
        this.aliases = ['r', 'remove'];
        this.describe = 'remove installed bit versions';
        this.command = [
            'remove [versions..]'
        ];
    }
    builder(yargs) {
        yargs.positional('versions', {
            describe: 'bit versions to remove'
        })
            .option({
            all: {
                alias: ['a'],
                describe: 'remove all installed versions',
                default: false,
                type: 'boolean'
            },
            'keep-versions': {
                describe: 'keep specific versions',
                array: true,
                type: 'string',
                requiresArg: true
            },
            'keep-latest-versions': {
                describe: 'keep the last <number> of versions',
                type: 'number',
                requiresArg: true
            }
        })
            .example('$0 remove 0.0.200', 'remove version 0.0.200 of bit')
            .example('$0 remove latest', 'remove the latest version that already installed')
            .example('$0 remove --all', 'remove all installed versions')
            .example('$0 remove --all --keep-versions 0.0.200', 'remove all installed versions except v0.0.200')
            .example('$0 remove --all --keep-latest-versions 3', 'remove all installed versions except the last 3 installed versions');
        return yargs;
    }
    handler(args) {
        return __awaiter(this, void 0, void 0, function* () {
            let res;
            const loaderText = 'removing versions from the file system';
            if (args.versions && args.versions.length) {
                loader.start(loaderText);
                res = yield bvm_remove_1.removeVersions(args.versions);
                loader.stop();
                return printOutput(res);
            }
            if (args.all) {
                loader.start(loaderText);
                res = yield bvm_remove_1.removeAll(args.keepVersions, args.keepLatestVersions);
                loader.stop();
                return printOutput(res);
            }
            throw new bvm_error_1.BvmError('no versions marked to be removed');
        });
    }
    ;
}
exports.RemoveCmd = RemoveCmd;
exports.command = new RemoveCmd();
function formatOutput(removeResults) {
    const removedOutput = removeResults.removedVersions.length ? `the following versions removed from the file system: ${chalk_1.default.cyan(removeResults.removedVersions)}` : undefined;
    const missingOutput = removeResults.missingVersions.length ? `the following versions are missing in the file system: ${chalk_1.default.cyan(removeResults.missingVersions)}` : undefined;
    return [removedOutput, missingOutput].filter(msg => msg).join('\n');
}
function printOutput(removeResults) {
    const output = formatOutput(removeResults);
    console.log(output);
    return output;
}
//# sourceMappingURL=remove.js.map