"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.command = exports.UpgradeCmd = void 0;
const bvm_install_1 = require("@teambit/bvm.install");
const chalk_1 = __importDefault(require("chalk"));
class UpgradeCmd {
    constructor() {
        this.aliases = ['u', 'upgrade'];
        this.describe = 'install latest bit version from the server, update the current version, and delete the previous installed version';
        this.command = [
            'upgrade'
        ];
    }
    builder(yargs) {
        yargs
            .example('$0 upgrade', 'install latest bit version from the server, update the current version, and delete the previous installed version');
        return yargs;
    }
    handler(args) {
        return __awaiter(this, void 0, void 0, function* () {
            const upgradeResults = yield bvm_install_1.installVersion('latest', { override: false, replace: true });
            return printOutput(upgradeResults);
        });
    }
    ;
}
exports.UpgradeCmd = UpgradeCmd;
exports.command = new UpgradeCmd();
function formatOutput(upgradeResults) {
    const replacedText = upgradeResults.previousCurrentVersion ? `upgraded from version ${chalk_1.default.green(upgradeResults.previousCurrentVersion)}` : undefined;
    const currentText = `current is now linked to version ${chalk_1.default.green(upgradeResults.installedVersion)} in path ${chalk_1.default.green(upgradeResults.versionPath)}`;
    return [replacedText, currentText].filter(msg => msg).join('\n');
}
function printOutput(upgradeResults) {
    const output = formatOutput(upgradeResults);
    console.log(output);
    return output;
}
//# sourceMappingURL=upgrade.js.map